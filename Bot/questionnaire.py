import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import pymongo
from pymongo import MongoClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = "7221571794:AAHavgln73Hx4OfrCLwbAvczkptlTMpJVLI"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ MongoDB
client = MongoClient("mongodb+srv://Ivan:=wLiQe1gec8cPKgRU@BazaDann.mongodb.net/<dbname>?retryWrites=true&w=majority")
db = client['BazaDann']  # –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
polls_collection = db['polls']  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–æ–≤

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

active_poll = {}

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")],
              [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")]],
    resize_keyboard=True
)

finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")]],
    resize_keyboard=True
)

@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=start_keyboard
    )

@dp.message(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
async def create_poll_start(message: types.Message):
    active_poll[message.from_user.id] = {"questions": [], "state": "waiting_for_question"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: ", reply_markup=finish_keyboard)

@dp.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_question")
async def add_poll_question(message: types.Message):
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞":
        await finish_poll_creation(message)
        return

    active_poll[message.from_user.id]["questions"].append({"question": message.text, "options": []})
    active_poll[message.from_user.id]["state"] = "waiting_for_options"
    await message.answer(f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {message.text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

@dp.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_options")
async def add_poll_options(message: types.Message):
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞":
        await finish_poll_creation(message)
        return

    options = message.text.split(",")
    active_poll[message.from_user.id]["questions"][-1]["options"] = options
    active_poll[message.from_user.id]["state"] = "waiting_for_question"
    await message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(options)}\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.")

async def save_poll_to_db(user_id, questions):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤ MongoDB"""
    poll_data = {
        "user_id": user_id,
        "questions": questions,
        "created_at": pymongo.datetime.datetime.now()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    }
    
    result = polls_collection.insert_one(poll_data)
    return result.inserted_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞

async def finish_poll_creation(message: types.Message):
    if message.from_user.id not in active_poll or not active_poll[message.from_user.id]["questions"]:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞! —Å —É–≤–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞ –°—ã–Ω–æ–≤—å—è —Ñ–µ—Ä–º–µ—Ä–∞", reply_markup=start_keyboard)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ä–æ—Å –≤ MongoDB
    poll_id = await save_poll_to_db(message.from_user.id, active_poll[message.from_user.id]["questions"])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–µ
    await message.answer(f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –í–æ—Ç –≤–∞—à –æ–ø—Ä–æ—Å:\n")
    for i, question in enumerate(active_poll[message.from_user.id]["questions"], 1):
        await message.answer(f"{i}. {question['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(question['options'])}")

    del active_poll[message.from_user.id]
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.", reply_markup=start_keyboard)

@dp.message(lambda message: message.text == "üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def take_poll(message: types.Message):
    await message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞.")

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
