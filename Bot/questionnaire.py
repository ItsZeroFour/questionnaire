import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from pymongo import MongoClient
import datetime
import logging
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")


client = MongoClient(MONGO_URI)
db = client['Groupproject']
polls_collection = db['polls']


bot = Bot(token=API_TOKEN)
dp = Dispatcher()


active_poll = {}

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")]],
    resize_keyboard=True
)


@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø—Ä–æ—Å–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=start_keyboard
    )


@dp.message(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
async def create_poll_start(message: types.Message):
    active_poll[message.from_user.id] = {"questions": [], "state": "waiting_for_question"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞:", reply_markup=finish_keyboard)


@dp.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_question")
async def add_poll_question(message: types.Message):
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞":
        await finish_poll_creation(message)
        return

    active_poll[message.from_user.id]["questions"].append({"question": message.text, "options": []})
    active_poll[message.from_user.id]["state"] = "waiting_for_options"
    await message.answer(f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {message.text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")


@dp.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_options")
async def add_poll_options(message: types.Message):
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞":
        await finish_poll_creation(message)
        return

    options = [opt.strip() for opt in message.text.split(",")]
    active_poll[message.from_user.id]["questions"][-1]["options"] = options
    active_poll[message.from_user.id]["state"] = "waiting_for_question"
    await message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(options)}\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.")


async def save_poll_to_db(user_id, questions):
    poll_data = {
        "user_id": user_id,
        "questions": questions,
        "created_at": datetime.datetime.now()
    }
    result = polls_collection.insert_one(poll_data)
    return result.inserted_id


async def finish_poll_creation(message: types.Message):
    user_id = message.from_user.id
    if user_id not in active_poll or not active_poll[user_id]["questions"]:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!", reply_markup=start_keyboard)
        return

    try:
        
        poll_id = await save_poll_to_db(user_id, active_poll[user_id]["questions"])
        
        
        poll_summary = "\n".join(
            f"{i}. {question['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(question['options'])}"
            for i, question in enumerate(active_poll[user_id]["questions"], 1)
        )
        
        
        await message.answer(f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! ID –æ–ø—Ä–æ—Å–∞: {poll_id}\n–í–æ—Ç –≤–∞—à –æ–ø—Ä–æ—Å:\n{poll_summary}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        
        del active_poll[user_id]
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.", reply_markup=start_keyboard)

@dp.message(lambda message: message.text == "üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def send_polls(message: types.Message):
    data = polls_collection.find()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    if polls_collection.count_documents({}) == 0:
        await message.reply("–í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤!")
        return

    for item in data:  
        questions = item.get("questions", [])
        for question_data in questions:
            question = question_data.get("question", "–í–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            options = question_data.get("options", [])  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

            if options:
                await bot.send_poll(
                    chat_id=message.chat.id,
                    question=question,  
                    options=options,  
                    is_anonymous=False
                )
            else:
                await message.reply(f"–û–ø—Ä–æ—Å \"{question}\" –Ω–µ –∏–º–µ–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.")



async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())