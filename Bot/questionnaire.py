import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import pymongo
from pymongo import MongoClient
import datetime  


API_TOKEN = "7221571794:AAHavgln73Hx4OfrCLwbAvczkptlTMpJVLI"


client = MongoClient("mongodb+srv://Darkivan:Python_aiogram_20@cluster0.jj6jc.mongodb.net/Groupproject?retryWrites=true&w=majority&appName=Cluster0")
db = client['Groupproject']  
polls_collection = db['polls'] 

bot = Bot(token=API_TOKEN)  
dp = Dispatcher()

active_poll = {}

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")],
        [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")]
    ],
    resize_keyboard=True
)

finish_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")]],
    resize_keyboard=True
)

@dp.message(Command(commands=["start"]))
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=start_keyboard
    )

@dp.message(lambda message: message.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
async def create_poll_start(message: types.Message):
    active_poll[message.from_user.id] = {"questions": [], "state": "waiting_for_question"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞: ", reply_markup=finish_keyboard)

@dp.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_question")
async def add_poll_question(message: types.Message):
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞":
        await finish_poll_creation(message)
        return

    
    active_poll[message.from_user.id]["questions"].append({"question": message.text, "options": []})
    active_poll[message.from_user.id]["state"] = "waiting_for_options"
    await message.answer(f"–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: {message.text}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")

@dp.message(lambda message: message.from_user.id in active_poll and active_poll[message.from_user.id]["state"] == "waiting_for_options")
async def add_poll_options(message: types.Message):
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞":
        await finish_poll_creation(message)
        return

    
    options = message.text.split(",")
    active_poll[message.from_user.id]["questions"][-1]["options"] = options  
    active_poll[message.from_user.id]["state"] = "waiting_for_question"
    await message.answer(f"–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {', '.join(options)}\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.")

async def save_poll_to_db(user_id, questions):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –≤ MongoDB"""
    poll_data = {
        "user_id": user_id,
        "questions": questions,
        "created_at": datetime.datetime.now()  
    }
    
    
    result = polls_collection.insert_one(poll_data)
    return result.inserted_id  

async def finish_poll_creation(message: types.Message):
    if message.from_user.id not in active_poll or not active_poll[message.from_user.id]["questions"]:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!", reply_markup=start_keyboard)
        return

    
    poll_id = await save_poll_to_db(message.from_user.id, active_poll[message.from_user.id]["questions"])
    
    
    await message.answer(f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö! –í–æ—Ç –≤–∞—à –æ–ø—Ä–æ—Å:\n")
    for i, question in enumerate(active_poll[message.from_user.id]["questions"], 1):
        await message.answer(f"{i}. {question['question']}\n–í–∞—Ä–∏–∞–Ω—Ç—ã: {', '.join(question['options'])}")

    
    del active_poll[message.from_user.id]
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞.", reply_markup=start_keyboard)

@dp.message(lambda message: message.text == "üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
async def take_poll(message: types.Message):
    
    polls = list(polls_collection.find())

    if not polls:
        await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤.", reply_markup=start_keyboard)
        return

    
    polls_keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True, 
        one_time_keyboard=True,
        keyboard=[[KeyboardButton(f"–û–ø—Ä–æ—Å –æ—Ç {str(poll['user_id'])}")] for poll in polls]  
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:", reply_markup=polls_keyboard)

async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())