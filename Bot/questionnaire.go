package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	tb "gopkg.in/telebot.v3"
)

type Poll struct {
	ID        primitive.ObjectID `bson:"_id,omitempty"` // –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ ID
	UserID    int64              `bson:"user_id"`
	Title     string             `bson:"title"`
	Questions []Question         `bson:"questions"`
	CreatedAt time.Time          `bson:"created_at"`
}

type Question struct {
	QuestionText string   `bson:"questionText"`
	Options      []string `bson:"options"`
}

var activePolls = make(map[int64]*Poll)
var pollsCollection *mongo.Collection

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	apiToken := os.Getenv("TELEGRAM_API_TOKEN")
	mongoURI := os.Getenv("MONGO_URI")

	// –ü–æ–¥–∫–ª—é—á–∏–ª –∫ MongoDB
	clientOptions := options.Client().ApplyURI(mongoURI)
	client, err := mongo.Connect(context.TODO(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}
	defer client.Disconnect(context.TODO())

	pollsCollection = client.Database("test").Collection("tests")

	// –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
	botSettings := tb.Settings{
		Token:  apiToken,
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	}
	bot, err := tb.NewBot(botSettings)
	if err != nil {
		log.Fatal(err)
	}

	startKeyboard := &tb.ReplyMarkup{ResizeKeyboard: true}
	btnCreatePoll := startKeyboard.Text("‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å")
	btnTakePoll := startKeyboard.Text("üìä –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å")
	startKeyboard.Reply(
		startKeyboard.Row(btnCreatePoll, btnTakePoll),
	)

	finishKeyboard := &tb.ReplyMarkup{ResizeKeyboard: true}
	btnFinishPoll := finishKeyboard.Text("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞")
	finishKeyboard.Reply(
		finishKeyboard.Row(btnFinishPoll),
	)

	// –°–æ–æ–±—â–µ–Ω–∏—è
	bot.Handle("/start", func(c tb.Context) error {
		return c.Send("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø—Ä–æ—Å–æ–≤!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", startKeyboard)
	})

	bot.Handle(&btnCreatePoll, func(c tb.Context) error {
		userID := c.Sender().ID
		activePolls[userID] = &Poll{
			UserID:    userID,
			Questions: []Question{},
		}
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (title) –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–ø—Ä–æ—Å–∞:")
	})

	bot.Handle(tb.OnText, func(c tb.Context) error {
		userID := c.Sender().ID
		activePoll, exists := activePolls[userID]
		if !exists {
			return nil
		}

		text := c.Text()
		switch activePoll.Title {
		case "":
			activePoll.Title = text
			return c.Send(fmt.Sprintf("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %s\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–ø—Ä–æ—Å–∞:", text), finishKeyboard)
		default:
			if len(activePoll.Questions) > 0 && len(activePoll.Questions[len(activePoll.Questions)-1].Options) == 0 {
				options := strings.Split(text, ",")
				for i := range options {
					options[i] = strings.TrimSpace(options[i])
				}
				activePoll.Questions[len(activePoll.Questions)-1].Options = options
				return c.Send(fmt.Sprintf("–í–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: %s\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞.", strings.Join(options, ", ")), finishKeyboard)
			} else {
				activePoll.Questions = append(activePoll.Questions, Question{QuestionText: text})
				return c.Send(fmt.Sprintf("–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω: %s\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", text))
			}
		}
	})

	bot.Handle(&btnFinishPoll, func(c tb.Context) error {
		userID := c.Sender().ID
		activePoll, exists := activePolls[userID]
		if !exists || len(activePoll.Questions) == 0 {
			return c.Send("–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!")
		}

		// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –≤ –ë–î
		activePoll.CreatedAt = time.Now()
		_, err := pollsCollection.InsertOne(context.TODO(), activePoll)
		if err != nil {
			log.Println("Error saving poll:", err)
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞.")
		}

		delete(activePolls, userID)

		summary := fmt.Sprintf("–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n–ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", activePoll.Title)
		for i, q := range activePoll.Questions {
			summary += fmt.Sprintf("%d. %s\n–í–∞—Ä–∏–∞–Ω—Ç—ã: %s\n", i+1, q.QuestionText, strings.Join(q.Options, ", "))
		}
		return c.Send(summary, startKeyboard)
	})

	bot.Handle(&btnTakePoll, func(c tb.Context) error {
		cursor, err := pollsCollection.Find(context.TODO(), bson.M{})
		if err != nil {
			return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–æ–≤.")
		}
		for cursor.Next(context.TODO()) {
			var poll Poll
			if err := cursor.Decode(&poll); err != nil {
				continue
			}
			// –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
		}
		cursor.Close(context.TODO()) // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

	
		inlineKeyboard := &tb.ReplyMarkup{}
		for cursor.Next(context.TODO()) {
			var poll Poll
			if err := cursor.Decode(&poll); err != nil { continue }
			btn := inlineKeyboard.Data(poll.Title, fmt.Sprintf("poll_%s", poll.ID.Hex()))
			
			// –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
			bot.Handle(&btn, func(ctx tb.Context) error {
				return ctx.Send(fmt.Sprintf("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ä–æ—Å: %s", poll.Title))
			})
	
			inlineKeyboard.Inline(inlineKeyboard.Row(btn))
		}
	
		return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ä–æ—Å –¥–ª—è —É—á–∞—Å—Ç–∏—è:", inlineKeyboard)
	})

	bot.Start()
}
